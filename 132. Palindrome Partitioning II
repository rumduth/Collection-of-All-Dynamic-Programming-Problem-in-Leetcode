Time: O(n*n)
Space: O(n*n)

/**
 * @param {string} s
 * @return {number}
 */
var minCut = function(s) {
    let n = s.length;
    if(n === 1) return 0;
    let isPalindrome = Array.from({length: n}, () => new Array(n).fill(true));
    for(let i = n - 2; i >= 0; i--) for(let j = i + 1; j < n; j++) isPalindrome[i][j] = s[i] === s[j] && isPalindrome[i+1][j-1];
    let dp = new Array(n).fill(0).map((_, i) => i + 1);
    for(let i = 1; i < n; i++){
        if(isPalindrome[0][i]){
            dp[i] = 1;
            continue;
        }
        for(let j = 1; j <= i; j++) if(isPalindrome[j][i]) dp[i] = Math.min(dp[j-1] + 1, dp[i]);
        
    }
    return dp.at(-1) - 1;
    
};
