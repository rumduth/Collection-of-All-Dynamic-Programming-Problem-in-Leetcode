Time: O(m*n)
Space: O(m*n)

/**
 * @param {number[][]} obstacleGrid
 * @return {number}
 */
var uniquePathsWithObstacles = function(grid) {
    let m = grid.length;
    let n = grid[0].length;
    let dp = Array.from({length: m}, () => new Array(n).fill(1));
    for(let i = 0; i < m; i++) for(let j = 0; j < n; j++) if(grid[i][j] === 1) dp[i][j] = 0;
    for(let i = 0; i < m; i++) for(let j = 0; j < n; j++){
        if(grid[i][j] === 0){
            if(i > 0 && j > 0) dp[i][j] = dp[i-1][j] + dp[i][j-1];
            else if(i > 0) dp[i][j] = dp[i-1][j];
            else if(j > 0) dp[i][j] = dp[i][j-1];
        }
    }
    
    return dp[m-1][n-1];
};
