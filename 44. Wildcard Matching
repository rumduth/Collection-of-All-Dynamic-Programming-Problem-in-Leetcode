Description:
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Time: O(m*n), Space: O(m*n)

/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
    let m = s.length;
    let n = p.length;

    let dp = Array.from({length: m + 1}, () => new Array(n+1).fill(false));
    dp[0][0] = true;
    for(let j = 1; j <= n; j++){
        if(p[j-1] !== '*') dp[0][j] = false;
        else dp[0][j] = dp[0][j-1];
    } 
    for(let i = 1; i <= m; i++){
        for(let j = 1; j <= n; j++){
            if(s[i-1] === p[j-1] || p[j-1] === '?') dp[i][j] = dp[i-1][j-1];
            else if(p[j-1] === '*'){
                dp[i][j] = dp[i][j-1] || dp[i-1][j];
            }
        }
    }
    return dp[m][n];
};
